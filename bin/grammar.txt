program        → declaration* EOF ;
declaration    → varDeclaration | statement ;
varDeclaration → "var" IDENTIFIER ( "=" expression )? ";" ;
statement      → exprStmt | ifStmt | printStmt | whileStmt | block ;
whileStmt      → "while" "(" expression ")" statement ;
block          → "{" declaration* "}" ;
ifStmt         → "if" "(" expression ")" statement ( "else" statement )? ;
exprStmt       → expression ";" ;
printStmt      → "print" expression ";" ;
expression     → assignment ;
assignment     → IDENTIFIER "=" assignment | logical_or ;
logical_or     → logical_and ( "or" logical_and ) * ;
logical_and    → equality ( "and" equality ) * ;
equality       → comparison (( "!=" | "==" ) comparison) * ;
comparison     → addition (( "<" | "<=" | ">" | ">=" ) addition) * ;
addition       → multiplication (( "-" | "+" ) multiplication) * ;
multiplication → unary (( "*" | "/" ) unary) * ;
unary          → (( "-" | "!" ) unary) | primary ;
primary        → "false" | "true" | "nil" | NUMBER | STRING | "(" expression ")" | IDENTIFIER ;



/* condensed, no precedence
expression -> literal | unary | binary | grouping ;
literal -> NUMBER | STRING | "true" | "false" | "nil" ;
grouping -> "(" expression ")" ;
unary -> ( "-" | "!" ) expression ;
binary -> expression operator expression ;
operator -> "==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "*" | "/" ;
*/
